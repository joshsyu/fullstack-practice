# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import message_pb2 as message__pb2


class GrpcServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.simpleRequest = channel.unary_unary(
                '/grpcservice.GrpcService/simpleRequest',
                request_serializer=message__pb2.RequestMsg.SerializeToString,
                response_deserializer=message__pb2.ReplyMsg.FromString,
                )
        self.streamRequest = channel.stream_unary(
                '/grpcservice.GrpcService/streamRequest',
                request_serializer=message__pb2.RequestMsg.SerializeToString,
                response_deserializer=message__pb2.ReplyMsg.FromString,
                )
        self.streamReply = channel.unary_stream(
                '/grpcservice.GrpcService/streamReply',
                request_serializer=message__pb2.RequestMsg.SerializeToString,
                response_deserializer=message__pb2.ReplyMsg.FromString,
                )
        self.streamRoute = channel.stream_stream(
                '/grpcservice.GrpcService/streamRoute',
                request_serializer=message__pb2.RequestMsg.SerializeToString,
                response_deserializer=message__pb2.ReplyMsg.FromString,
                )


class GrpcServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def simpleRequest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def streamRequest(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def streamReply(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def streamRoute(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GrpcServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'simpleRequest': grpc.unary_unary_rpc_method_handler(
                    servicer.simpleRequest,
                    request_deserializer=message__pb2.RequestMsg.FromString,
                    response_serializer=message__pb2.ReplyMsg.SerializeToString,
            ),
            'streamRequest': grpc.stream_unary_rpc_method_handler(
                    servicer.streamRequest,
                    request_deserializer=message__pb2.RequestMsg.FromString,
                    response_serializer=message__pb2.ReplyMsg.SerializeToString,
            ),
            'streamReply': grpc.unary_stream_rpc_method_handler(
                    servicer.streamReply,
                    request_deserializer=message__pb2.RequestMsg.FromString,
                    response_serializer=message__pb2.ReplyMsg.SerializeToString,
            ),
            'streamRoute': grpc.stream_stream_rpc_method_handler(
                    servicer.streamRoute,
                    request_deserializer=message__pb2.RequestMsg.FromString,
                    response_serializer=message__pb2.ReplyMsg.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'grpcservice.GrpcService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class GrpcService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def simpleRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpcservice.GrpcService/simpleRequest',
            message__pb2.RequestMsg.SerializeToString,
            message__pb2.ReplyMsg.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def streamRequest(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/grpcservice.GrpcService/streamRequest',
            message__pb2.RequestMsg.SerializeToString,
            message__pb2.ReplyMsg.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def streamReply(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/grpcservice.GrpcService/streamReply',
            message__pb2.RequestMsg.SerializeToString,
            message__pb2.ReplyMsg.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def streamRoute(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/grpcservice.GrpcService/streamRoute',
            message__pb2.RequestMsg.SerializeToString,
            message__pb2.ReplyMsg.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
