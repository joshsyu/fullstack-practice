// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.15.8
// source: message.proto

package grpcservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RequestMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ap  string `protobuf:"bytes,1,opt,name=ap,proto3" json:"ap,omitempty"`
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *RequestMsg) Reset() {
	*x = RequestMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestMsg) ProtoMessage() {}

func (x *RequestMsg) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestMsg.ProtoReflect.Descriptor instead.
func (*RequestMsg) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{0}
}

func (x *RequestMsg) GetAp() string {
	if x != nil {
		return x.Ap
	}
	return ""
}

func (x *RequestMsg) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type ReplyMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg    string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *ReplyMsg) Reset() {
	*x = ReplyMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyMsg) ProtoMessage() {}

func (x *ReplyMsg) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyMsg.ProtoReflect.Descriptor instead.
func (*ReplyMsg) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{1}
}

func (x *ReplyMsg) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ReplyMsg) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

var File_message_proto protoreflect.FileDescriptor

var file_message_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0b, 0x67, 0x72, 0x70, 0x63, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x2e, 0x0a, 0x0a,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x61, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x61, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x34, 0x0a, 0x08,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x73, 0x67, 0x32, 0x9d, 0x02, 0x0a, 0x0b, 0x47, 0x72, 0x70, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x1a, 0x15, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x4d, 0x73, 0x67, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x1a,
	0x15, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x4d, 0x73, 0x67, 0x22, 0x00, 0x28, 0x01, 0x12, 0x41, 0x0a, 0x0b, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x17, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d,
	0x73, 0x67, 0x1a, 0x15, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x73, 0x67, 0x22, 0x00, 0x30, 0x01, 0x12, 0x43, 0x0a,
	0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x17, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x4d, 0x73, 0x67, 0x1a, 0x15, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x73, 0x67, 0x22, 0x00, 0x28, 0x01,
	0x30, 0x01, 0x42, 0x24, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5a, 0x0c, 0x67, 0x72, 0x70, 0x63,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_message_proto_rawDescOnce sync.Once
	file_message_proto_rawDescData = file_message_proto_rawDesc
)

func file_message_proto_rawDescGZIP() []byte {
	file_message_proto_rawDescOnce.Do(func() {
		file_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_message_proto_rawDescData)
	})
	return file_message_proto_rawDescData
}

var file_message_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_message_proto_goTypes = []interface{}{
	(*RequestMsg)(nil), // 0: grpcservice.RequestMsg
	(*ReplyMsg)(nil),   // 1: grpcservice.ReplyMsg
}
var file_message_proto_depIdxs = []int32{
	0, // 0: grpcservice.GrpcService.simpleRequest:input_type -> grpcservice.RequestMsg
	0, // 1: grpcservice.GrpcService.streamRequest:input_type -> grpcservice.RequestMsg
	0, // 2: grpcservice.GrpcService.streamReply:input_type -> grpcservice.RequestMsg
	0, // 3: grpcservice.GrpcService.streamRoute:input_type -> grpcservice.RequestMsg
	1, // 4: grpcservice.GrpcService.simpleRequest:output_type -> grpcservice.ReplyMsg
	1, // 5: grpcservice.GrpcService.streamRequest:output_type -> grpcservice.ReplyMsg
	1, // 6: grpcservice.GrpcService.streamReply:output_type -> grpcservice.ReplyMsg
	1, // 7: grpcservice.GrpcService.streamRoute:output_type -> grpcservice.ReplyMsg
	4, // [4:8] is the sub-list for method output_type
	0, // [0:4] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_message_proto_init() }
func file_message_proto_init() {
	if File_message_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_message_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_message_proto_goTypes,
		DependencyIndexes: file_message_proto_depIdxs,
		MessageInfos:      file_message_proto_msgTypes,
	}.Build()
	File_message_proto = out.File
	file_message_proto_rawDesc = nil
	file_message_proto_goTypes = nil
	file_message_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GrpcServiceClient is the client API for GrpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GrpcServiceClient interface {
	SimpleRequest(ctx context.Context, in *RequestMsg, opts ...grpc.CallOption) (*ReplyMsg, error)
	StreamRequest(ctx context.Context, opts ...grpc.CallOption) (GrpcService_StreamRequestClient, error)
	StreamReply(ctx context.Context, in *RequestMsg, opts ...grpc.CallOption) (GrpcService_StreamReplyClient, error)
	StreamRoute(ctx context.Context, opts ...grpc.CallOption) (GrpcService_StreamRouteClient, error)
}

type grpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcServiceClient(cc grpc.ClientConnInterface) GrpcServiceClient {
	return &grpcServiceClient{cc}
}

func (c *grpcServiceClient) SimpleRequest(ctx context.Context, in *RequestMsg, opts ...grpc.CallOption) (*ReplyMsg, error) {
	out := new(ReplyMsg)
	err := c.cc.Invoke(ctx, "/grpcservice.GrpcService/simpleRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcServiceClient) StreamRequest(ctx context.Context, opts ...grpc.CallOption) (GrpcService_StreamRequestClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GrpcService_serviceDesc.Streams[0], "/grpcservice.GrpcService/streamRequest", opts...)
	if err != nil {
		return nil, err
	}
	x := &grpcServiceStreamRequestClient{stream}
	return x, nil
}

type GrpcService_StreamRequestClient interface {
	Send(*RequestMsg) error
	CloseAndRecv() (*ReplyMsg, error)
	grpc.ClientStream
}

type grpcServiceStreamRequestClient struct {
	grpc.ClientStream
}

func (x *grpcServiceStreamRequestClient) Send(m *RequestMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *grpcServiceStreamRequestClient) CloseAndRecv() (*ReplyMsg, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ReplyMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *grpcServiceClient) StreamReply(ctx context.Context, in *RequestMsg, opts ...grpc.CallOption) (GrpcService_StreamReplyClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GrpcService_serviceDesc.Streams[1], "/grpcservice.GrpcService/streamReply", opts...)
	if err != nil {
		return nil, err
	}
	x := &grpcServiceStreamReplyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GrpcService_StreamReplyClient interface {
	Recv() (*ReplyMsg, error)
	grpc.ClientStream
}

type grpcServiceStreamReplyClient struct {
	grpc.ClientStream
}

func (x *grpcServiceStreamReplyClient) Recv() (*ReplyMsg, error) {
	m := new(ReplyMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *grpcServiceClient) StreamRoute(ctx context.Context, opts ...grpc.CallOption) (GrpcService_StreamRouteClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GrpcService_serviceDesc.Streams[2], "/grpcservice.GrpcService/streamRoute", opts...)
	if err != nil {
		return nil, err
	}
	x := &grpcServiceStreamRouteClient{stream}
	return x, nil
}

type GrpcService_StreamRouteClient interface {
	Send(*RequestMsg) error
	Recv() (*ReplyMsg, error)
	grpc.ClientStream
}

type grpcServiceStreamRouteClient struct {
	grpc.ClientStream
}

func (x *grpcServiceStreamRouteClient) Send(m *RequestMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *grpcServiceStreamRouteClient) Recv() (*ReplyMsg, error) {
	m := new(ReplyMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GrpcServiceServer is the server API for GrpcService service.
type GrpcServiceServer interface {
	SimpleRequest(context.Context, *RequestMsg) (*ReplyMsg, error)
	StreamRequest(GrpcService_StreamRequestServer) error
	StreamReply(*RequestMsg, GrpcService_StreamReplyServer) error
	StreamRoute(GrpcService_StreamRouteServer) error
}

// UnimplementedGrpcServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGrpcServiceServer struct {
}

func (*UnimplementedGrpcServiceServer) SimpleRequest(context.Context, *RequestMsg) (*ReplyMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimpleRequest not implemented")
}
func (*UnimplementedGrpcServiceServer) StreamRequest(GrpcService_StreamRequestServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamRequest not implemented")
}
func (*UnimplementedGrpcServiceServer) StreamReply(*RequestMsg, GrpcService_StreamReplyServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamReply not implemented")
}
func (*UnimplementedGrpcServiceServer) StreamRoute(GrpcService_StreamRouteServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamRoute not implemented")
}

func RegisterGrpcServiceServer(s *grpc.Server, srv GrpcServiceServer) {
	s.RegisterService(&_GrpcService_serviceDesc, srv)
}

func _GrpcService_SimpleRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServiceServer).SimpleRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcservice.GrpcService/SimpleRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServiceServer).SimpleRequest(ctx, req.(*RequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcService_StreamRequest_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GrpcServiceServer).StreamRequest(&grpcServiceStreamRequestServer{stream})
}

type GrpcService_StreamRequestServer interface {
	SendAndClose(*ReplyMsg) error
	Recv() (*RequestMsg, error)
	grpc.ServerStream
}

type grpcServiceStreamRequestServer struct {
	grpc.ServerStream
}

func (x *grpcServiceStreamRequestServer) SendAndClose(m *ReplyMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *grpcServiceStreamRequestServer) Recv() (*RequestMsg, error) {
	m := new(RequestMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GrpcService_StreamReply_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RequestMsg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GrpcServiceServer).StreamReply(m, &grpcServiceStreamReplyServer{stream})
}

type GrpcService_StreamReplyServer interface {
	Send(*ReplyMsg) error
	grpc.ServerStream
}

type grpcServiceStreamReplyServer struct {
	grpc.ServerStream
}

func (x *grpcServiceStreamReplyServer) Send(m *ReplyMsg) error {
	return x.ServerStream.SendMsg(m)
}

func _GrpcService_StreamRoute_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GrpcServiceServer).StreamRoute(&grpcServiceStreamRouteServer{stream})
}

type GrpcService_StreamRouteServer interface {
	Send(*ReplyMsg) error
	Recv() (*RequestMsg, error)
	grpc.ServerStream
}

type grpcServiceStreamRouteServer struct {
	grpc.ServerStream
}

func (x *grpcServiceStreamRouteServer) Send(m *ReplyMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *grpcServiceStreamRouteServer) Recv() (*RequestMsg, error) {
	m := new(RequestMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _GrpcService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpcservice.GrpcService",
	HandlerType: (*GrpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "simpleRequest",
			Handler:    _GrpcService_SimpleRequest_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "streamRequest",
			Handler:       _GrpcService_StreamRequest_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "streamReply",
			Handler:       _GrpcService_StreamReply_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "streamRoute",
			Handler:       _GrpcService_StreamRoute_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "message.proto",
}
