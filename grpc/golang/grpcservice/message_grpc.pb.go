// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package _

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GrpcServiceClient is the client API for GrpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrpcServiceClient interface {
	SimpleRequest(ctx context.Context, in *RequestMsg, opts ...grpc.CallOption) (*ReplyMsg, error)
	StreamRequest(ctx context.Context, opts ...grpc.CallOption) (GrpcService_StreamRequestClient, error)
	StreamReply(ctx context.Context, in *RequestMsg, opts ...grpc.CallOption) (GrpcService_StreamReplyClient, error)
	StreamRoute(ctx context.Context, opts ...grpc.CallOption) (GrpcService_StreamRouteClient, error)
}

type grpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcServiceClient(cc grpc.ClientConnInterface) GrpcServiceClient {
	return &grpcServiceClient{cc}
}

func (c *grpcServiceClient) SimpleRequest(ctx context.Context, in *RequestMsg, opts ...grpc.CallOption) (*ReplyMsg, error) {
	out := new(ReplyMsg)
	err := c.cc.Invoke(ctx, "/grpcservice.GrpcService/simpleRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcServiceClient) StreamRequest(ctx context.Context, opts ...grpc.CallOption) (GrpcService_StreamRequestClient, error) {
	stream, err := c.cc.NewStream(ctx, &GrpcService_ServiceDesc.Streams[0], "/grpcservice.GrpcService/streamRequest", opts...)
	if err != nil {
		return nil, err
	}
	x := &grpcServiceStreamRequestClient{stream}
	return x, nil
}

type GrpcService_StreamRequestClient interface {
	Send(*RequestMsg) error
	CloseAndRecv() (*ReplyMsg, error)
	grpc.ClientStream
}

type grpcServiceStreamRequestClient struct {
	grpc.ClientStream
}

func (x *grpcServiceStreamRequestClient) Send(m *RequestMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *grpcServiceStreamRequestClient) CloseAndRecv() (*ReplyMsg, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ReplyMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *grpcServiceClient) StreamReply(ctx context.Context, in *RequestMsg, opts ...grpc.CallOption) (GrpcService_StreamReplyClient, error) {
	stream, err := c.cc.NewStream(ctx, &GrpcService_ServiceDesc.Streams[1], "/grpcservice.GrpcService/streamReply", opts...)
	if err != nil {
		return nil, err
	}
	x := &grpcServiceStreamReplyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GrpcService_StreamReplyClient interface {
	Recv() (*ReplyMsg, error)
	grpc.ClientStream
}

type grpcServiceStreamReplyClient struct {
	grpc.ClientStream
}

func (x *grpcServiceStreamReplyClient) Recv() (*ReplyMsg, error) {
	m := new(ReplyMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *grpcServiceClient) StreamRoute(ctx context.Context, opts ...grpc.CallOption) (GrpcService_StreamRouteClient, error) {
	stream, err := c.cc.NewStream(ctx, &GrpcService_ServiceDesc.Streams[2], "/grpcservice.GrpcService/streamRoute", opts...)
	if err != nil {
		return nil, err
	}
	x := &grpcServiceStreamRouteClient{stream}
	return x, nil
}

type GrpcService_StreamRouteClient interface {
	Send(*RequestMsg) error
	Recv() (*ReplyMsg, error)
	grpc.ClientStream
}

type grpcServiceStreamRouteClient struct {
	grpc.ClientStream
}

func (x *grpcServiceStreamRouteClient) Send(m *RequestMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *grpcServiceStreamRouteClient) Recv() (*ReplyMsg, error) {
	m := new(ReplyMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GrpcServiceServer is the server API for GrpcService service.
// All implementations must embed UnimplementedGrpcServiceServer
// for forward compatibility
type GrpcServiceServer interface {
	SimpleRequest(context.Context, *RequestMsg) (*ReplyMsg, error)
	StreamRequest(GrpcService_StreamRequestServer) error
	StreamReply(*RequestMsg, GrpcService_StreamReplyServer) error
	StreamRoute(GrpcService_StreamRouteServer) error
	mustEmbedUnimplementedGrpcServiceServer()
}

// UnimplementedGrpcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGrpcServiceServer struct {
}

func (UnimplementedGrpcServiceServer) SimpleRequest(context.Context, *RequestMsg) (*ReplyMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimpleRequest not implemented")
}
func (UnimplementedGrpcServiceServer) StreamRequest(GrpcService_StreamRequestServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamRequest not implemented")
}
func (UnimplementedGrpcServiceServer) StreamReply(*RequestMsg, GrpcService_StreamReplyServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamReply not implemented")
}
func (UnimplementedGrpcServiceServer) StreamRoute(GrpcService_StreamRouteServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamRoute not implemented")
}
func (UnimplementedGrpcServiceServer) mustEmbedUnimplementedGrpcServiceServer() {}

// UnsafeGrpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrpcServiceServer will
// result in compilation errors.
type UnsafeGrpcServiceServer interface {
	mustEmbedUnimplementedGrpcServiceServer()
}

func RegisterGrpcServiceServer(s grpc.ServiceRegistrar, srv GrpcServiceServer) {
	s.RegisterService(&GrpcService_ServiceDesc, srv)
}

func _GrpcService_SimpleRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServiceServer).SimpleRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcservice.GrpcService/simpleRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServiceServer).SimpleRequest(ctx, req.(*RequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcService_StreamRequest_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GrpcServiceServer).StreamRequest(&grpcServiceStreamRequestServer{stream})
}

type GrpcService_StreamRequestServer interface {
	SendAndClose(*ReplyMsg) error
	Recv() (*RequestMsg, error)
	grpc.ServerStream
}

type grpcServiceStreamRequestServer struct {
	grpc.ServerStream
}

func (x *grpcServiceStreamRequestServer) SendAndClose(m *ReplyMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *grpcServiceStreamRequestServer) Recv() (*RequestMsg, error) {
	m := new(RequestMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GrpcService_StreamReply_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RequestMsg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GrpcServiceServer).StreamReply(m, &grpcServiceStreamReplyServer{stream})
}

type GrpcService_StreamReplyServer interface {
	Send(*ReplyMsg) error
	grpc.ServerStream
}

type grpcServiceStreamReplyServer struct {
	grpc.ServerStream
}

func (x *grpcServiceStreamReplyServer) Send(m *ReplyMsg) error {
	return x.ServerStream.SendMsg(m)
}

func _GrpcService_StreamRoute_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GrpcServiceServer).StreamRoute(&grpcServiceStreamRouteServer{stream})
}

type GrpcService_StreamRouteServer interface {
	Send(*ReplyMsg) error
	Recv() (*RequestMsg, error)
	grpc.ServerStream
}

type grpcServiceStreamRouteServer struct {
	grpc.ServerStream
}

func (x *grpcServiceStreamRouteServer) Send(m *ReplyMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *grpcServiceStreamRouteServer) Recv() (*RequestMsg, error) {
	m := new(RequestMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GrpcService_ServiceDesc is the grpc.ServiceDesc for GrpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcservice.GrpcService",
	HandlerType: (*GrpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "simpleRequest",
			Handler:    _GrpcService_SimpleRequest_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "streamRequest",
			Handler:       _GrpcService_StreamRequest_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "streamReply",
			Handler:       _GrpcService_StreamReply_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "streamRoute",
			Handler:       _GrpcService_StreamRoute_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "message.proto",
}
